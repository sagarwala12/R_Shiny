geom_polygon(color = NA) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
labs(fill = "Median Household Income")
countydata %>%
left_join(counties, by = "county_fips") %>%
filter(state_name =="California") %>%
ggplot(mapping = aes(long, lat, group = group, fill = horate)) +
geom_polygon(color = "#ffffff", size = .25) +
scale_fill_gradientn(labels = scales::percent,
guide = guide_colorbar(title.position = "top")) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
theme(legend.title = element_text(),
legend.key.width = unit(.5, "in")) +
labs(fill = "Homeownership rate") +
theme_urbn_map()
head(counties)
head(countydata)
View(household_data)
countydata %>%
left_join(counties, by = "county_fips") %>%
filter(state_name =="California") %>%
ggplot(mapping = aes(long, lat, group = group, fill = hhpop)) +
geom_polygon(color = "#ffffff", size = .25) +
scale_fill_gradientn(labels = scales::percent,
guide = guide_colorbar(title.position = "top")) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
theme(legend.title = element_text(),
legend.key.width = unit(.5, "in")) +
labs(fill = "Homeownership rate") +
theme_urbn_map()
countydata %>%
left_join(counties, by = "county_fips") %>%
filter(state_name =="California") %>%
ggplot(mapping = aes(long, lat, group = group, fill = horate)) +
geom_polygon(color = "#ffffff", size = .25) +
scale_fill_gradientn(labels = scales::percent,
guide = guide_colorbar(title.position = "top")) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
theme(legend.title = element_text(),
legend.key.width = unit(.5, "in")) +
labs(fill = "Homeownership rate") +
theme_urbn_map()
view(countydata)
install.packages("tidycensus")
library(tidycensus)
?tidycensus
get_decennial()
library(tidyverse)
library(dplyr)
cases_state <- read.csv('./data/statewide_cases.csv')
state_test <- read.csv('./data/statewide_testing.csv')
cases_age <- read.csv('./data/case_demographics_age.csv')
cases_ethnic<- read.csv('./data/case_demographics_ethnicity.csv')
cases_sex <- read.csv('./data/case_demographics_sex.csv')
hospitals <- read.csv('./data/hospitals_by_county.csv')
#indexing age, sex, ethnic background to cases statewide. By using the date as ID we can create separate data frames of each factor by the county it was located within.
ca_age <- merge(cases_state, cases_age, by = "date")
ca_sex <- merge(cases_state, cases_sex, by = "date")
ca_ethnic <- merge(cases_state, cases_ethnic, by = "date")
library(tidyverse)
library(dplyr)
cases_state <- read.csv('./data/statewide_cases.csv')
state_test <- read.csv('./data/statewide_testing.csv')
cases_age <- read.csv('./data/case_demographics_age.csv')
cases_ethnic<- read.csv('./data/case_demographics_ethnicity.csv')
cases_sex <- read.csv('./data/case_demographics_sex.csv')
hospitals <- read.csv('./data/hospitals_by_county.csv')
#indexing age, sex, ethnic background to cases statewide. By using the date as ID we can create separate data frames of each factor by the county it was located within.
ca_age <- merge(cases_state, cases_age, by = "date")
ca_sex <- merge(cases_state, cases_sex, by = "date")
ca_ethnic <- merge(cases_state, cases_ethnic, by = "date")
library(googleVis)
demo(googleVis)
library(googleVis)
end
library(googleVis)
shiny::runApp('C:/Users/shala/Desktop/R_Shiny')
shiny::runApp('C:/Users/shala/Desktop/R_Shiny')
runApp('C:/Users/shala/Desktop/R_Shiny')
runApp('C:/Users/shala/Desktop/R_Shiny')
runApp('C:/Users/shala/Desktop/R_Shiny')
setwd("C:/Users/shala/Desktop/R_Shiny")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
function(input, output){
output$line1 <- renderGvis({
gvisLineChart(state_test, "date", "tested",
options = list(width= "1500", height = "500",
title = "COVID Testing progress in CA",
hAxis ="{title:'Dates'}",
vAxis="{title: 'total tested'}")
)
})
output$bar1 <- renderGvis({
gvisBarChart(age_plot, xvar="age_group", yvar=c("totalpositive", "deaths", "deaths_percent"),
options=list(title="Age Demographics",
titleTextStyle="{color:'Black',fontName:'Courier',fontSize:16}",
width="1500", height="500",
legend = "bottom",
explorer="{actions:['dragToZoom', 'rightClickToReset']}",
bar="{groupWidth:'100%'}")
)
})
output$combo1 <- renderGvis({
gvisComboChart(ethnic_plot, xvar="race_ethnicity", yvar=c("cases", "deaths"),
options=list(title="Ethnic Demographic",
explorer="{actions:['dragToZoom', 'rightClickToReset']}",
titleTextStyle="{color:'black',
fontName:'Courier',
fontSize:16}",
curveType="function",
pointSize=9,
seriesType="bars",
series="[{type:'line',
targetAxisIndex:0,
color:'red'},
{type:'bars',
targetAxisIndex:1,
color:'grey'}]",
vAxes="[{title:'cases',
titleTextStyle: {color: 'red'},
textStyle:{color: 'black'},
textPosition: 'out'},
{title:'deaths',
format:'#,###',
titleTextStyle: {color: 'grey'},
textStyle:{color: 'grey'},
textPosition: 'out',
minValue:0}]",
hAxes="[{title:'Race',
textPosition: 'out'}]",
width=1500, height=500
),
chartid="twoaxiscombochart"
)
})
output$plot1 <- renderGvis({
gvisComboChart(sex_plot, xvar="sex", yvar=c("totalpositive2", "deaths"),
options=list(title="Gender Demographic",
titleTextStyle="{color:'black',
fontName:'Courier',
fontSize:16}",
curveType="function",
pointSize=9,
seriesType="bars",
series="[{type:'line',
targetAxisIndex:0,
color:'red'},
{type:'bars',
targetAxisIndex:1,
color:'blue'}]",
vAxes="[{title:'cases positive',
titleTextStyle: {color: 'red'},
textStyle:{color: 'black'},
textPosition: 'out'},
{title:'deaths',
format:'#,###',
titleTextStyle: {color: 'blue'},
textStyle:{color: 'blue'},
textPosition: 'out',
minValue:0}]",
hAxes="[{title:'Gender',
textPosition: 'out'}]",
width=1500, height=500
),
chartid="twoaxiscombochart"
)
})
output$map <- renderGvis({
gvisGeoChart(state_stat, "state.name", input$selected,
options=list(region="US", displayMode="regions",
resolution="provinces",
width="1500", height="500"))
# using width="auto" and height="auto" to
# automatically adjust the map size
})
# show histogram using googleVis
output$hist <- renderGvis(
gvisHistogram(state_stat[,input$selected, drop=FALSE]))
output$table <- DT::renderDataTable({
datatable(state_stat, rownames=FALSE) %>%
formatStyle(input$selected,
background="skyblue", fontWeight='bold')
# Highlight selected column using formatStyle
})
}
#install.packages('devtools')
#install.packages('ps')
#devtools::install_github("UrbanInstitute/urbnmapr")
#devtools::install_github("UrbanInstitute/urbnthemes")
library(tidyverse)
library(urbnmapr)
library(dplyr)
library(ggplot2)
library(urbnthemes)
ggplot() +
geom_polygon(data = urbnmapr::states , mapping = aes(x = long, y = lat, group = group),
fill = "grey", color = "white") +
coord_map(projection = "albers", lat0 = 39, lat1 = 45)
household_data <- left_join(countydata, counties, by = "county_fips")
household_data %>%
ggplot(aes(long, lat, group = group, fill = medhhincome)) +
geom_polygon(color = NA) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
labs(fill = "Median Household Income")
cal_map <- countydata %>%
left_join(counties, by = "county_fips") %>%
filter(state_name =="California") %>%
ggplot(mapping = aes(long, lat, group = group, fill = horate)) +
geom_polygon(color = "#ffffff", size = .25) +
scale_fill_gradientn(labels = scales::percent,
guide = guide_colorbar(title.position = "top")) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
theme(legend.title = element_text(),
legend.key.width = unit(.5, "in")) +
labs(fill = "Homeownership rate") +
theme_urbn_map()
cal_map
leaflet_ca <- leaflet(CA) %>%
addTiles() %>%
addPolylines(~Long, ~Lat)
require(datasets)
states <- data.frame(state.name, state.x77)
G3 <- gvisGeoMap(states, "state.name", "Illiteracy",
options=list(region="US", dataMode="regions",
width=600, height=400))
plot(G3)
library(sp)
library(rgeos)
library(rgdal)
library(maptools)
library(dplyr)
library(leaflet)
library(scales)
### Begin data prep
# Grab air/water quality data from the EPA
url = "https://data.cdc.gov/api/views/cjae-szjv/rows.csv?accessType=DOWNLOAD"
dat <- read.csv(url, stringsAsFactors = FALSE)
# Colnames tolower
names(dat) <- tolower(names(dat))
dat$countyname <- tolower(dat$countyname)
# Wide data set, subset only what we need.
county_dat <- subset(dat, measureid == "296",
select = c("reportyear","countyfips","statename", "countyname", "value", "unitname")) %>%
subset(reportyear==2011, select = c("countyfips", "value"))
# Rename columns to make for a clean df merge later.
colnames(county_dat) <- c("GEOID", "airqlty")
# Have to add leading zeos to any FIPS code that's less than 5 digits long to get a good match.
# I'm cheating by using C code. sprintf will work as well.
county_dat$GEOID <- formatC(county_dat$GEOID, width = 5, format = "d", flag = "0")
### End data prep
# Download county shape file from Tiger.
# https://www.census.gov/geo/maps-data/data/cbf/cbf_counties.html
us.map <- readOGR(dsn = ".", layer = "cb_2013_us_county_20m", stringsAsFactors = FALSE)
library(shiny)
library(leaflet)
library(sf)
# VA counties - downloaded via the awesome tigris package
shape <- tigris::counties(state = "VA", class = "sf")
# Define UI
ui <- fluidPage(
# Application title
titlePanel("The Old Dominion"),
# Top panel with county name
verticalLayout(
wellPanel(textOutput("cnty")),
# the map itself
mainPanel(
leafletOutput("map")
)
)
)
# Define server logic
server <- function(input, output) {
output$map <- renderLeaflet({
leaflet() %>%
addProviderTiles("Stamen.Toner") %>%
addPolygons(data = shape,
fillColor = "aliceblue",
color = "grey",
layerId = ~COUNTYNS)
})
# this is the fun part!
observe({
event <- input$map_shape_click
output$cnty <- renderText(shape$NAMELSAD[shape$COUNTYNS == event$id])
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(leaflet)
library(sf)
# VA counties - downloaded via the awesome tigris package
shape <- tigris::counties(state = "CA", class = "sf")
# Define UI
ui <- fluidPage(
# Application title
titlePanel("The Old Dominion"),
# Top panel with county name
verticalLayout(
wellPanel(textOutput("cnty")),
# the map itself
mainPanel(
leafletOutput("map")
)
)
)
# Define server logic
server <- function(input, output) {
output$map <- renderLeaflet({
leaflet() %>%
addProviderTiles("Stamen.Toner") %>%
addPolygons(data = shape,
fillColor = "aliceblue",
color = "grey",
layerId = ~COUNTYNS)
})
# this is the fun part!
observe({
event <- input$map_shape_click
output$cnty <- renderText(shape$NAMELSAD[shape$COUNTYNS == event$id])
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(leaflet)
library(sf)
# VA counties - downloaded via the awesome tigris package
shape <- tigris::counties(state = "CA", class = "sf")
# Define UI
ui <- fluidPage(
# Application title
titlePanel("The Old Dominion"),
# Top panel with county name
verticalLayout(
wellPanel(textOutput("cnty")),
# the map itself
mainPanel(
leafletOutput("map")
)
)
)
# Define server logic
server <- function(input, output) {
output$map <- renderLeaflet({
leaflet() %>%
addProviderTiles() %>%
addPolygons(data = shape,
fillColor = "aliceblue",
color = "grey",
layerId = ~COUNTYNS)
})
# this is the fun part!
observe({
event <- input$map_shape_click
output$cnty <- renderText(shape$NAMELSAD[shape$COUNTYNS == event$id])
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(leaflet)
library(sf)
# VA counties - downloaded via the awesome tigris package
shape <- tigris::counties(state = "CA", class = "sf")
# Define UI
ui <- fluidPage(
# Application title
titlePanel("The Old Dominion"),
# Top panel with county name
verticalLayout(
wellPanel(textOutput("cnty")),
# the map itself
mainPanel(
leafletOutput("map")
)
)
)
# Define server logic
server <- function(input, output) {
output$map <- renderLeaflet({
leaflet() %>%
addTiles() %>%
addPolygons(data = shape,
fillColor = "aliceblue",
color = "grey",
layerId = ~COUNTYNS)
})
# this is the fun part!
observe({
event <- input$map_shape_click
output$cnty <- renderText(shape$NAMELSAD[shape$COUNTYNS == event$id])
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
county_fips
counties
view(counties)
View(ca_age)
tbl1 <- gvisTable(Population)
plot(tbl1)
## Table with enabled paging
tbl2 <- gvisTable(Population, options=list(page='enable', height=300))
plot(tbl2)
cases_state <- read.csv('./data/statewide_cases.csv')
state_test <- read.csv('./data/statewide_testing.csv')
cases_age <- read.csv('./data/case_demographics_age.csv')
cases_ethnic<- read.csv('./data/case_demographics_ethnicity.csv')
cases_sex <- read.csv('./data/case_demographics_sex.csv')
hospitals <- read.csv('./data/hospitals_by_county.csv')
county_list <- read.csv('./data/county-list.csv')
tmp1 <-select(cases_state, "county", "date")
ca_age <- inner_join(tmp1, cases_age, by = "date") #merge age, date, county information
ca_sex <- inner_join(tmp1, cases_sex, by = "date") #merge sex, date, county information
ca_ethnic <- inner_join(tmp1, cases_ethnic, by = "date") #merge ethnic, date, county information
View(tmp1)
View(hospitals)
View(cases_state)
runApp()
library(shiny)
library(leaflet)
library(sf)
# VA counties - downloaded via the awesome tigris package
shape <- tigris::counties(state = "CA", class = "sf")
# Define UI
ui <- fluidPage(
# Application title
titlePanel("The Old Dominion"),
# Top panel with county name
verticalLayout(
wellPanel(textOutput("cnty")),
# the map itself
mainPanel(
leafletOutput("map")
)
)
)
# Define server logic
server <- function(input, output) {
output$map <- renderLeaflet({
leaflet() %>%
addTiles() %>%
addPolygons(data = shape,
fillColor = "aliceblue",
color = "grey",
layerId = ~COUNTYNS)
})
# this is the fun part!
observe({
event <- input$map_shape_click
output$cnty <- renderText(shape$NAMELSAD[shape$COUNTYNS == event$id])
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(hospitals)
data
cnty
county_subdivisions()
county_subdivisions(CA)
county_subdivisions(US_CA)
runApp()
View(cases_state)
state_stat2 <- data.frame(county = rownames(cases_state), cases_state)
rownames(cases_state) <- NULL
choice2<- colnames(cases_state)[-1]
runApp()
state_stat <- data.frame(county = rownames(cases_state), cases_state)
View(state_stat)
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
